"use client"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useState } from "react"

// Categor√≠as de iconos organizados por tipo
const iconCategories = {
  "Propiedades": ["üè†", "üè°", "üè¢", "üè¨", "üè™", "üè®", "üè∞", "‚õ∫", "üö™", "ü™ü"],
  "Finanzas": ["üí∞", "üíµ", "üí¥", "üí∂", "üí∑", "üí≥", "üè¶", "üìä", "üìà", "üí∏"],
  "Estados": ["‚úÖ", "‚ùå", "‚è≥", "üîÑ", "‚ö†Ô∏è", "‚ÑπÔ∏è", "üîí", "üîì", "‚≠ê", "üåü"],
  "Actividades": ["üèñÔ∏è", "üèîÔ∏è", "üåä", "üå¥", "üéØ", "üé™", "üé®", "üé≠", "üé™", "üéâ"],
  "Servicios": ["üöó", "‚úàÔ∏è", "üöá", "üöå", "üöï", "üõµ", "üö≤", "üöÅ", "üõ´", "üõ¨"],
  "Comodidades": ["üõèÔ∏è", "üöø", "üõÅ", "ü™ë", "ü™û", "üì∫", "üì±", "üíª", "üåê", "üîå"],
  "Ubicaci√≥n": ["üìç", "üó∫Ô∏è", "üåç", "üèôÔ∏è", "üåÜ", "üåÉ", "üåÖ", "üåá", "üåâ", "üèûÔ∏è"],
  "Personas": ["üë•", "üë§", "üë®‚Äçüíº", "üë©‚Äçüíº", "üë®‚Äçüîß", "üë©‚Äçüîß", "üë®‚Äçüç≥", "üë©‚Äçüç≥", "üë®‚Äç‚öïÔ∏è", "üë©‚Äç‚öïÔ∏è"],
  "Tiempo": ["üìÖ", "‚è∞", "üïê", "üïë", "üïí", "üïì", "üïî", "üïï", "üïñ", "üïó"],
  "Comunicaci√≥n": ["üìû", "üìß", "üí¨", "üì±", "üì†", "üì®", "üì©", "üì§", "üì•", "üì¶"],
}

interface IconPickerProps {
  value: string
  onChange: (icon: string) => void
  disabled?: boolean
}

export function IconPicker({ value, onChange, disabled }: IconPickerProps) {
  const [selectedCategory, setSelectedCategory] = useState<string>("Propiedades")

  const handleEmojiClick = (emoji: string) => {
    onChange(emoji)
  }

  const handleInputChange = (inputValue: string) => {
    // Permitir solo emojis y caracteres especiales
    onChange(inputValue)
  }

  return (
    <div className="space-y-3">
      {/* Selector de categor√≠a */}
      <div className="space-y-2">
        <Label>Seleccionar categor√≠a:</Label>
        <div className="grid grid-cols-2 gap-1">
          {Object.keys(iconCategories).map((category) => (
            <Button
              key={category}
              type="button"
              variant={selectedCategory === category ? "default" : "outline"}
              size="sm"
              disabled={disabled}
              onClick={() => setSelectedCategory(category)}
              className="text-xs"
            >
              {category}
            </Button>
          ))}
        </div>
      </div>

      {/* Grid de iconos */}
      <div className="space-y-2">
        <Label>Iconos disponibles:</Label>
        <div className="grid grid-cols-5 gap-1 p-3 border rounded-lg bg-muted/30">
          {iconCategories[selectedCategory as keyof typeof iconCategories].map((emoji, index) => (
            <Button
              key={`${selectedCategory}-${index}`}
              type="button"
              variant="ghost"
              size="sm"
              disabled={disabled}
              onClick={() => handleEmojiClick(emoji)}
              className={cn(
                "h-8 w-8 p-0 text-lg hover:bg-primary/10 transition-colors",
                value === emoji && "bg-primary/20 ring-2 ring-primary/30"
              )}
              title={`Seleccionar ${emoji}`}
            >
              {emoji}
            </Button>
          ))}
        </div>
      </div>

      {/* Campo de entrada manual */}
      <div className="space-y-2">
        <Label htmlFor="icon-input">O escribe tu propio emoji:</Label>
        <Input
          id="icon-input"
          value={value}
          onChange={(e) => handleInputChange(e.target.value)}
          placeholder="ej: üè† üí∞ ‚úÖ"
          disabled={disabled}
          className="text-center text-lg"
          maxLength={4} // Limitar a pocos emojis
        />
        <p className="text-xs text-muted-foreground">
          Puedes pegar emojis directamente o escribir caracteres especiales
        </p>
      </div>

      {/* Vista previa */}
      {value && (
        <div className="flex items-center gap-2 p-2 border rounded-lg bg-muted/30">
          <span className="text-sm text-muted-foreground">Vista previa:</span>
          <span className="text-2xl">{value}</span>
          <span className="text-sm text-muted-foreground">
            ({value.length} caracteres)
          </span>
        </div>
      )}
    </div>
  )
}
